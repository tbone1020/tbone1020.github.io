# Check if the correct versions were 
# updated and stop the deployment if not
name: check-for-updated-versions

on: 
  pull_request:
    branches:
      - master
# MASTER_PACKAGE_VERSION=1.2.3; 
# [[ $(cut -d'.' -f1 <<<$MASTER_PACKAGE_VERSION) -lt $(jq -r '.version' ./package.json | cut -d'.' -f1) ]]
# | split(".") | join("") | tonumber
# test="$(jq -r '.version' ./package.json)"; echo $test
# [[ 5 -lt 3 || 15 -lt 10 || 0 -gt 5 ]] && echo 'hello' || echo 'No' 
# Start with incoming one
jobs:
  check-package-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the master repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: master
      - name: Get the master package versions and hash
        run: |
          if [ -f package.json ]; then
            echo MASTER_PACKAGE_VERSION="$(jq -r '.version' package.json)" >> "$GITHUB_ENV"
          fi
          if [ -f composer.json ]; then
            echo MASTER_COMPOSER_VERSION="$(jq -r '.version' composer.json)" >> "$GITHUB_ENV"
          fi
          if [ -f composer.lock ]; then
            echo MASTER_COMPOSER_LOCK_HASH="$(jq -r '."content-hash"' composer.lock)" >> "$GITHUB_ENV"
          fi
      - name: Checkout the current repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
      - name: Compare package.json's versions
        run: |
          if [ -f package.json ]; then
            current_major="$(jq '.version | split(".")[0]|tonumber' package.json)"
            master_major=$(cut -d '.' -f 1 <<<"$MASTER_PACKAGE_VERSION")
            if [ $current_major -lt $master_major ]; then
              echo "package's major is below the master version"
              exit 1
            fi 

            if [ $current_major -gt $master_major ]; then
              exit 0
            fi 

            current_minor="$(jq '.version | split(".")[1]|tonumber' package.json)"
            master_minor=$(cut -d '.' -f 2 <<<"$MASTER_PACKAGE_VERSION")
            if [ $current_minor -lt $master_minor ]; then
              echo "package's minor is below the master version"
              exit 1
            fi 

            if [ $current_minor -gt $master_minor ]; then
              exit 0
            fi 

            current_patch="$(jq '.version | split(".")[2]|tonumber' package.json)"
            master_patch=$(cut -d '.' -f 3 <<<"$MASTER_PACKAGE_VERSION")
            if [ $current_patch -lt $master_patch ]; then
              echo "package's patch is below the master version"
              exit 1
            fi 

            if [ $current_patch -gt $master_patch ]; then
              exit 0
            fi

            echo "Package.json needs to be updated"
            exit 1
          fi
      - name: Compare composer.json's versions
        run: |
          if [ -f composer.json ]; then
            current_major="$(jq '.version | split(".")[0]|tonumber' composer.json)"
            master_major=$(cut -d '.' -f 1 <<<"$MASTER_COMPOSER_VERSION")
            if [ $current_major -lt $master_major ]; then
              echo "composer's major is below the master version"
              exit 1
            fi 

            if [ $current_major -gt $master_major ]; then
              exit 0
            fi 

            current_minor="$(jq '.version | split(".")[1]|tonumber' composer.json)"
            master_minor=$(cut -d '.' -f 2 <<<"$MASTER_COMPOSER_VERSION")
            if [ $current_minor -lt $master_minor ]; then
              echo "composer's minor is below the master version"
              exit 1
            fi 

            if [ $current_minor -gt $master_minor ]; then
              exit 0
            fi 

            current_patch="$(jq '.version | split(".")[2]|tonumber' composer.json)"
            master_patch=$(cut -d '.' -f 3 <<<"$MASTER_COMPOSER_VERSION")
            if [ $current_patch -lt $master_patch ]; then
              echo "composer's patch is below the master version"
              exit 1
            fi 

            if [ $current_patch -gt $master_patch ]; then
              exit 0
            fi

            echo "Composer.json needs to be updated"
            exit 1
          fi
      - name: Compare composer.lock's hash
        run: |
          if [ -f composer.lock ]; then
            current_hash="$(jq '."content-hash"' composer.lock)"
            if [$current_hash -eq $MASTER_COMPOSER_LOCK_HASH ]; then 
              echo "composer.lock's file needs to be updated"
              exit 1
            fi
          fi
          
