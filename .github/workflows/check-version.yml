# Check if the versions were updated
# and stop the merge if not
name: check-for-updated-versions

on: 
  pull_request:
    branches:
      - master

jobs:
  compare-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: master
      - name: Get verions and or content-hash from the master branch
        run: |
          version=
          for file in package.json package-lock.json composer.json; do
            if ! [ -f "$file" ]; then
              continue
            fi
            if [ -n "$version" ] && [ "$version" != "$(jq -r '.version' "$file")" ]; then 
              echo "The version in $file does not match with the other versions"
              exit 1
            fi
            version="$(jq -r '.version' "$file")"
          done
          if [ -z "$version" ]; then
            echo "no versions were found on the master branch"
            exit 1
          fi
          echo MASTER_VERSION="$version" >> "$GITHUB_ENV"
          echo MASTER_COMPOSER_HASH="$(jq -r '."content-hash"' composer.lock 2>/dev/null)" >>"$GITHUB_ENV"
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
      - name: Compare the versions and or content-hash
        run: |
          branch_version=
          for file in package.json package-lock.json composer.json; do
            if ! [ -f "$file" ]; then
              continue
            fi
            if [ -n "$branch_version" ] && [ "$branch_version" != "$(jq -r '.version' "$file")" ]; then 
              echo "The version in $file does not match with the other versions"
              exit 1
            fi
            branch_version="$(jq -r '.version' "$file")"
          done
          
          if [ "$branch_version" == "$MASTER_VERSION" ]; then
            echo "The version in $file needs to be updated"
            exit 1
          fi

          [ -n $MASTER_COMPOSER_HASH ] && [ "$(jq -r '."content-hash"' composer.lock 2>/dev/null)" = $MASTER_COMPOSER_HASH ] && exit 1

          branch_major=$(cut -d '.' -f 1 <<<"$branch_version")
          master_major=$(cut -d '.' -f 1 <<<"$MASTER_VERSION")
          if [ $branch_major -gt $master_major ]; then
            exit 0
          fi
      
          branch_minor=$(cut -d '.' -f 2 <<<"$branch_version")
          master_minor=$(cut -d '.' -f 2 <<<"$MASTER_VERSION")
          if [ $branch_minor -gt $master_minor ]; then
            exit 0
          fi

          branch_patch=$(cut -d '.' -f 3 <<<"$branch_version")
          master_patch=$(cut -d '.' -f 3 <<<"$MASTER_VERSION")
          if [ $branch_patch -gt $master_patch ]; then
             exit 0
          fi

          echo "No versions were updated"
          exit 1
